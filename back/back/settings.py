"""
Django settings for back project.

Generated by 'django-admin startproject' using Django 3.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import sys
from ast import literal_eval

import environ
from django.utils.translation import gettext_lazy as _

env = environ.Env()
environ.Env.read_env(env.str("ENV_PATH", "back/.env"))

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG", default=False)

if env("ALLOWED_HOSTS", default="") != "":
    ALLOWED_HOSTS = [host for host in env.list("ALLOWED_HOSTS")]
else:
    # Fallback for old environment variable to avoid breaking change
    ALLOWED_HOSTS = [
        env("ALLOWED_HOST", default="0.0.0.0"),
    ]

if DEBUG:
    ALLOWED_HOSTS = ["*"]


if env.str("BASE_URL", "") == "":
    BASE_URL = "https://" + ALLOWED_HOSTS[0]
else:
    BASE_URL = env("BASE_URL")

CSRF_TRUSTED_ORIGINS = env.list(
    "CSRF_TRUSTED_ORIGINS",
    default=[
        BASE_URL,
    ],
)

INSTALLED_APPS = [
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.postgres",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.humanize",
    "users",
    "organization",
    "misc",
    "back",
    # admin
    "admin.templates",
    "admin.notes",
    "admin.to_do",
    "admin.resources",
    "admin.introductions",
    "admin.admin_tasks",
    "admin.badges",
    "admin.integrations",
    "admin.preboarding",
    "admin.appointments",
    "admin.sequences",
    "admin.people",
    "admin.settings",
    "admin.hardware",
    # new hires
    "new_hire",
    # slack
    "slack_bot",
    # external
    "rest_framework",
    "axes",
    "anymail",
    "django_q",
    "crispy_forms",
    # allauth
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
]

# custom
ALLOW_LOGIN_WITH_CREDENTIALS = env.bool("ALLOW_LOGIN_WITH_CREDENTIALS", True)
# allauth
SOCIALACCOUNT_ONLY = not ALLOW_LOGIN_WITH_CREDENTIALS

if ALLOW_LOGIN_WITH_CREDENTIALS:
    INSTALLED_APPS += ["allauth.mfa"]

DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# ALLAUTH config
ACCOUNT_ADAPTER = "users.adapter.UserAdapter"
SOCIALACCOUNT_ADAPTER = "users.adapter.SocialAccountAdapter"
MFA_ADAPTER = "users.adapter.MFAAdapter"
ACCOUNT_LOGIN_METHODS = {"email"}
ACCOUNT_SIGNUP_FIELDS = [
    "email*",
    "password1*",
    "password2*",
]  # not used, but needed for allauth
# We don't allow signups, so this is not necessary
ACCOUNT_EMAIL_VERIFICATION = "none"
ACCOUNT_MAX_EMAIL_ADDRESSES = 1
ACCOUNT_PRESERVE_USERNAME_CASING = False  # lowercases username (email) value
ACCOUNT_SESSION_REMEMBER = True
ACCOUNT_USER_MODEL_USERNAME_FIELD = "email"
MFA_TOTP_ISSUER = env("CHIEFONBOARDING_NAME", default="ChiefOnboarding")
# social
SOCIALACCOUNT_AUTO_SIGNUP = env.bool("SSO_AUTO_CREATE_USER", default=False)
SOCIALACCOUNT_EMAIL_AUTHENTICATION = True
SOCIALACCOUNT_EMAIL_REQUIRED = True
SOCIALACCOUNT_EMAIL_AUTHENTICATION_AUTO_CONNECT = True

SOCIALACCOUNT_PROVIDERS = literal_eval(env("SSO_PROVIDERS", default="{}"))
ALLAUTH_PROVIDERS = env.list("ALLAUTH_PROVIDERS", default=[])
if ALLAUTH_PROVIDERS:
    for provider in ALLAUTH_PROVIDERS:
        INSTALLED_APPS += ["allauth.socialaccount.providers." + provider]


if env.bool("ALLOW_GOOGLE_SSO", False):
    INSTALLED_APPS += ["allauth.socialaccount.providers.google"]
    SOCIALACCOUNT_PROVIDERS["google"] = {
        "APPS": [
            {
                "client_id": env.str("GOOGLE_SSO_CLIENT_ID", ""),
                "secret": env.str("GOOGLE_SSO_SECRET", ""),
                "key": "",
            },
        ],
        "AUTH_PARAMS": {
            "access_type": "offline",
        },
        "OAUTH_PKCE_ENABLED": True,
    }

OIDC_ROLE_PATH_IN_RETURN = env("OIDC_ROLE_PATH_IN_RETURN", default="")
OIDC_ROLE_ADMIN_PATTERN = env("OIDC_ROLE_ADMIN_PATTERN", default="^cn=Administrators.*")
OIDC_ROLE_MANAGER_PATTERN = env("OIDC_ROLE_MANAGER_PATTERN", default="^cn=Managers.*")
OIDC_ROLE_NEW_HIRE_PATTERN = env("OIDC_ROLE_NEW_HIRE_PATTERN", default="^cn=Newhires.*")

if env("OIDC_CLIENT_ID", default="") != "":
    # for migration/legacy purposes. Make sure everyone migrates to the allauth setup
    raise Exception("You need to configure OIDC differently. Please read the docs")


# DJANGO login config
LOGIN_REDIRECT_URL = "logged_in_user_redirect"
LOGOUT_REDIRECT_URL = "account_login"
LOGIN_URL = "account_login"

RUNNING_TESTS = "pytest" in sys.modules
FAKE_SLACK_API = False
SLACK_USE_SOCKET = env.bool("SLACK_USE_SOCKET", default=False)
SLACK_APP_TOKEN = env("SLACK_APP_TOKEN", default="")
SLACK_BOT_TOKEN = env("SLACK_BOT_TOKEN", default="")
SLACK_DISABLE_AUTO_UPDATE_CHANNELS = env.bool(
    "SLACK_DISABLE_AUTO_UPDATE_CHANNELS", default=False
)

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "organization.middleware.HealthCheckMiddleware",
    "organization.middleware.SetupOrgMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.auth.middleware.LoginRequiredMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "users.middleware.language_middleware",
    "axes.middleware.AxesMiddleware",
    "allauth.account.middleware.AccountMiddleware",
]

# Django Debug Bar
if DEBUG:
    import socket

    INSTALLED_APPS += [
        "debug_toolbar",
    ]
    MIDDLEWARE += [
        "debug_toolbar.middleware.DebugToolbarMiddleware",
    ]
    hostname, _dummy, ips = socket.gethostbyname_ex(socket.gethostname())
    INTERNAL_IPS = [ip[:-1] + "1" for ip in ips] + ["127.0.0.1", "10.0.2.2"]


ROOT_URLCONF = "back.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "organization.context_processor.org_include",
            ],
        },
    },
]
TEMPLATE_DIRS = (os.path.join(BASE_DIR, "templates"),)

WSGI_APPLICATION = "back.wsgi.application"

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {"default": env.db()}

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": (
            "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
        ),
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]

AUTH_USER_MODEL = "users.User"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
    ],
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "api.permissions.AdminPermission",
    ],
}


# API
API_ACCESS = env.bool("API_ACCESS", default=DEBUG or RUNNING_TESTS)
if API_ACCESS:
    INSTALLED_APPS += ["rest_framework.authtoken", "api"]

# Email
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

if env("MAILGUN_API_KEY", default="") != "":
    ANYMAIL = {
        "MAILGUN_API_KEY": env("MAILGUN_KEY", default=""),
        "MAILGUN_SENDER_DOMAIN": env("MAILGUN_DOMAIN", default=""),
    }
    EMAIL_BACKEND = "anymail.backends.mailgun.EmailBackend"

if env("MAILJET_API_KEY", default="") != "":
    ANYMAIL = {
        "MAILJET_API_KEY": env("MAILJET_API_KEY", default=""),
        "MAILJET_SECRET_KEY": env("MAILJET_SECRET_KEY", default=""),
    }
    EMAIL_BACKEND = "anymail.backends.mailjet.EmailBackend"

if env("MANDRILL_KEY", default="") != "":
    ANYMAIL = {"MANDRILL_API_KEY": env("MANDRILL_KEY", default="")}
    EMAIL_BACKEND = "anymail.backends.mandrill.EmailBackend"

if env("POSTMARK_KEY", default="") != "":
    ANYMAIL = {"POSTMARK_SERVER_TOKEN": env("POSTMARK_KEY", default="")}
    EMAIL_BACKEND = "anymail.backends.postmark.EmailBackend"

if env("SENDGRID_KEY", default="") != "":
    ANYMAIL = {"SENDGRID_API_KEY": env("SENDGRID_KEY", default="")}
    EMAIL_BACKEND = "anymail.backends.sendgrid.EmailBackend"

if env("SENDINBLUE_KEY", default="") != "":
    ANYMAIL = {"SENDINBLUE_API_KEY": env("SENDINBLUE_KEY", default="")}
    EMAIL_BACKEND = "anymail.backends.sendinblue.EmailBackend"

if env("EMAIL_HOST", default="") != "":
    EMAIL_HOST = env("EMAIL_HOST", default="localhost")
    EMAIL_PORT = env.int("EMAIL_PORT", default=25)
    EMAIL_HOST_USER = env("EMAIL_HOST_USER", default="")
    EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD", default="")
    EMAIL_USE_TLS = env.bool("EMAIL_USE_TLS", default=False)
    EMAIL_USE_SSL = env.bool("EMAIL_USE_SSL", default=False)
    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"


DEFAULT_FROM_EMAIL = env("DEFAULT_FROM_EMAIL", default="example@example.com")

OLD_PASSWORD_FIELD_ENABLED = True

# Caching
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.db.DatabaseCache",
        "LOCATION": "cached_items",
    }
}

Q_CLUSTER = {
    "name": "DjangORM",
    "workers": 1,
    "timeout": 90,
    "retry": 1800,
    "queue_limit": 50,
    "bulk": 10,
    "orm": "default",
    "catch_up": False,
    "max_attempts": 2,
}

if DEBUG and RUNNING_TESTS:
    Q_CLUSTER["sync"] = True

# AWS
AWS_S3_ENDPOINT_URL = env(
    "AWS_S3_ENDPOINT_URL", default="https://s3.eu-west-1.amazonaws.com"
)
AWS_ACCESS_KEY_ID = env("AWS_ACCESS_KEY_ID", default="")
AWS_SECRET_ACCESS_KEY = env("AWS_SECRET_ACCESS_KEY", default="")
AWS_STORAGE_BUCKET_NAME = env("AWS_STORAGE_BUCKET_NAME", default="")
# fallback for old environment variable, AWS_DEFAULT_REGION should be prefered
AWS_REGION = env("AWS_REGION", default="eu-west-1")
AWS_DEFAULT_REGION = env("AWS_DEFAULT_REGION", default=AWS_REGION)

# Twilio
TWILIO_FROM_NUMBER = env("TWILIO_FROM_NUMBER", default="")
TWILIO_ACCOUNT_SID = env("TWILIO_ACCOUNT_SID", default="")
TWILIO_AUTH_TOKEN = env("TWILIO_AUTH_TOKEN", default="")

# Django-Axes
AUTHENTICATION_BACKENDS = [
    # AxesBackend should be the first backend in the AUTHENTICATION_BACKENDS list.
    "axes.backends.AxesBackend",
    # Django ModelBackend is the default authentication backend.
    "django.contrib.auth.backends.ModelBackend",
    # `allauth` specific authentication methods, such as login by email
    "allauth.account.auth_backends.AuthenticationBackend",
]
AXES_ENABLED = env.bool("AXES_ENABLED", default=True)
AXES_FAILURE_LIMIT = env.int("AXES_FAILURE_LIMIT", default=10)
AXES_COOLOFF_TIME = env.int("AXES_COOLOFF_TIME", default=24)
AXES_IPWARE_PROXY_COUNT = env.int("AXES_IPWARE_PROXY_COUNT", default=None)
AXES_IPWARE_META_PRECEDENCE_ORDER = env.tuple(
    "AXES_IPWARE_META_PRECEDENCE_ORDER", default=("REMOTE_ADDR",)
)

if env.bool("AXES_USE_FORWARDED_FOR", True):
    AXES_IPWARE_META_PRECEDENCE_ORDER = [
        "HTTP_X_FORWARDED_FOR",
        "REMOTE_ADDR",
    ]

# Error tracking
if env("SENTRY_URL", default="") != "":
    import logging

    import sentry_sdk
    from sentry_sdk.integrations.django import DjangoIntegration
    from sentry_sdk.integrations.logging import LoggingIntegration

    sentry_logging = LoggingIntegration(
        level=logging.INFO,  # Capture info and above as breadcrumbs
        event_level=logging.ERROR,  # Send errors as events
    )

    sentry_sdk.init(
        dsn=env("SENTRY_URL", default=""),
        integrations=[DjangoIntegration(), sentry_logging],
        # If you wish to associate users to errors (assuming you are using
        # django.contrib.auth) you may enable sending PII data.
        send_default_pii=False,
    )

if not env.bool("DEBUG", default=False) and not env.bool(
    "HTTP_INSECURE", default=False
):
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True

FIXTURE_DIRS = ["fixtures"]

# Forcing SSL from Django - preferably done a few levels before,
# but this is a last resort in the case of Heroku
if env.bool("SSL_REDIRECT", default=False):
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
    SECURE_SSL_REDIRECT = True

# Storing static files compressed
STORAGES = {
    "staticfiles": {"BACKEND": "whitenoise.storage.CompressedStaticFilesStorage"},
}

# Languages
LANGUAGES = [
    ("en", _("English")),
    ("nl", _("Dutch")),
    ("fr", _("French")),
    ("de", _("German")),
    ("tr", _("Turkish")),
    ("pt", _("Portuguese")),
    ("jp", _("Japanese")),
    ("es", _("Spanish")),
    ("cs", _("Czech")),
]
LANGUAGE_SESSION_KEY = "chief-language"
SITE_ROOT = os.path.dirname(os.path.realpath(__name__))
LOCALE_PATHS = (os.path.join(SITE_ROOT, "locale"),)

if env.bool("DEBUG_LOGGING", default=False):
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "formatters": {
            "simple": {"format": "%(levelname)s %(message)s"},
        },
        "handlers": {
            "console": {
                "level": "DEBUG",
                "class": "logging.StreamHandler",
                "formatter": "simple",
            },
        },
        "loggers": {
            "django.request": {
                "handlers": ["console"],
                "propagate": False,
                "level": "DEBUG",
            },
            "root": {"level": "DEBUG", "handlers": ["console"]},
        },
    }
